# -*- coding: utf-8 -*-
"""Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uem_q3le0-YL1cjDmdIkW7Qas7vlIImz
"""

!pip install streamlit

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load Data (pastikan file 'sales_data.csv' tersedia)
sales_data = pd.read_csv('sales_data.csv')

# Mengonversi kolom waktu menjadi format datetime
sales_data['order_purchase_timestamp'] = pd.to_datetime(sales_data['order_purchase_timestamp'])

# Mengonversi kolom 'order_estimated_delivery_date' dan 'order_delivered_customer_date' ke datetime
sales_data['order_estimated_delivery_date'] = pd.to_datetime(sales_data['order_estimated_delivery_date'])
sales_data['order_delivered_customer_date'] = pd.to_datetime(sales_data['order_delivered_customer_date'])

# Menambahkan kolom bulan dan tahun
sales_data['order_purchase_month'] = sales_data['order_purchase_timestamp'].dt.month
sales_data['order_purchase_year'] = sales_data['order_purchase_timestamp'].dt.year

# Bagian Streamlit Dashboard
st.title("Sales Dashboard")

# Menghitung total penjualan dan revenue bulanan
monthly_sales = sales_data.groupby(['order_purchase_year', 'order_purchase_month'])['price'].sum().reset_index()
monthly_sales['month_year'] = monthly_sales['order_purchase_year'].astype(str) + '-' + monthly_sales['order_purchase_month'].astype(str)

# Visualisasi performa penjualan dan revenue
st.subheader("Performa Revenue Bulanan (2016-2018)")
plt.figure(figsize=(14, 7))
sns.lineplot(data=monthly_sales, x='month_year', y='price', color='#008000')
plt.xticks(rotation=45)
plt.title('Performa Revenue Bulanan Tahun 2016-2018', fontsize=16, fontweight='bold')
plt.xlabel('Tahun-Bulan', fontsize=12)
plt.ylabel('Total Revenue', fontsize=12)
st.pyplot(plt)

# Menghitung jumlah penjualan produk
product_sales = sales_data['product_category_name_english'].value_counts().reset_index()
product_sales.columns = ['product_category_name_english', 'order_item_id']

# Visualisasi Kategori Produk Terlaris
st.subheader("Top 10 Kategori Produk Terlaris")
plt.figure(figsize=(14, 7))
sns.barplot(data=product_sales.head(10), x='order_item_id', y='product_category_name_english', palette='Greens_r')
plt.title('Top 10 Kategori Produk Paling Banyak Terjual (2016-2018)', fontsize=16, fontweight='bold')
plt.xlabel('Jumlah Penjualan', fontsize=12)
plt.ylabel('Kategori Produk', fontsize=12)
st.pyplot(plt)

# Recency Distribution
sales_data['days_since_last_purchase'] = (sales_data['order_purchase_timestamp'].max() - sales_data['order_purchase_timestamp']).dt.days
recency = sales_data.groupby('customer_id')['days_since_last_purchase'].min().reset_index()

# Frequency Distribution
frequency = sales_data.groupby('customer_id')['order_id'].nunique().reset_index()

# Monetary Distribution
monetary = sales_data.groupby('customer_id')['order_value'].sum().reset_index()

# Menggabungkan RFM
rfm = recency.merge(frequency, on='customer_id').merge(monetary, on='customer_id')

# Visualisasi Recency
st.subheader("Distribusi Recency (Hari Sejak Pembelian Terakhir)")
plt.figure(figsize=(12, 6))
sns.histplot(rfm['days_since_last_purchase'], bins=20, kde=True, color='#008000')
plt.title('Recency Distribution', fontsize=16, fontweight='bold')
plt.xlabel('Days Since Last Purchase', fontsize=12)
plt.ylabel('Number of Customers', fontsize=12)
st.pyplot(plt)

# Visualisasi Frequency
st.subheader("Distribusi Frequency (Jumlah Transaksi per Pelanggan)")
plt.figure(figsize=(12, 6))
sns.histplot(frequency['order_id'], bins=20, kde=True, color='#008000')
plt.title('Frequency Distribution', fontsize=16, fontweight='bold')
plt.xlabel('Number of Transactions', fontsize=12)
plt.ylabel('Number of Customers', fontsize=12)
st.pyplot(plt)

# Visualisasi Monetary
st.subheader("Distribusi Monetary (Nilai Total Transaksi per Pelanggan)")
plt.figure(figsize=(12, 6))
sns.histplot(monetary['order_value'], bins=20, kde=True, color='#008000')
plt.title('Monetary Distribution', fontsize=16, fontweight='bold')
plt.xlabel('Total Transaction Value', fontsize=12)
plt.ylabel('Number of Customers', fontsize=12)
st.pyplot(plt)

# Visualisasi CLV
clv = sales_data.groupby('customer_id')['order_value'].sum().reset_index()
clv.columns = ['customer_id', 'customer_lifetime_value']

st.subheader("Distribusi Customer Lifetime Value (CLV)")
plt.figure(figsize=(12, 6))
sns.histplot(clv['customer_lifetime_value'], bins=20, kde=True, color='#008000')
plt.title('Customer Lifetime Value Distribution', fontsize=16, fontweight='bold')
plt.xlabel('Customer Lifetime Value', fontsize=12)
plt.ylabel('Number of Customers', fontsize=12)
st.pyplot(plt)

# Order Status Distribution
order_status_count = sales_data['order_status'].value_counts()

st.subheader("Distribusi Status Pesanan")
plt.figure(figsize=(12, 6))
order_status_count.plot(kind='bar', color='#008000')
plt.title('Order Status Distribution')
plt.xlabel('Order Status')
plt.ylabel('Number of Orders')
st.pyplot(plt)

# Waktu Pengiriman (Actual vs Estimated)
sales_data['delivery_diff_days'] = (sales_data['order_estimated_delivery_date'] - sales_data['order_delivered_customer_date']).dt.days

st.subheader("Perbedaan Waktu Pengiriman (Actual vs Estimated)")
plt.figure(figsize=(12, 6))
sns.histplot(sales_data['delivery_diff_days'], bins=20, kde=True, color='#008000')
plt.title('Actual vs Estimated Delivery Time')
plt.xlabel('Difference in Days')
plt.ylabel('Frequency')
st.pyplot(plt)

# Penjual dengan penjualan tertinggi
top_sellers = sales_data.groupby('seller_id')['order_value'].sum().sort_values(ascending=False).head(10)

st.subheader("Top 10 Penjual Berdasarkan Penjualan")
plt.figure(figsize=(12, 6))
top_sellers.plot(kind='bar', color='#008000')
plt.title('Top 10 Sellers by Sales', fontsize=16)
plt.xlabel('Seller ID', fontsize=12)
plt.ylabel('Total Sales', fontsize=12)
st.pyplot(plt)